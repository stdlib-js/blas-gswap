{"version":3,"file":"index.mjs","sources":["../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isndarrayLike from '@stdlib/assert-is-ndarray-like' ;\nimport isCollection from '@stdlib/assert-is-collection' ;\nimport isFloat64Array from '@stdlib/assert-is-float64array' ;\nimport isFloat32Array from '@stdlib/assert-is-float32array' ;\nimport format from '@stdlib/error-tools-fmtprodmsg' ;\nimport { ndarray as dswap } from '@stdlib/blas-base-dswap' ;\nimport { ndarray as sswap } from '@stdlib/blas-base-sswap' ;\nimport { ndarray as swap } from '@stdlib/blas-base-gswap' ;\n\n\n// MAIN //\n\n/**\n* Interchanges two vectors.\n*\n* ## Notes\n*\n* -   In general, for best performance, especially for large vectors, provide 1-dimensional `ndarrays` whose underlying data type is either `float64` or `float32`.\n*\n* @param {(Collection|VectorLike)} x - first input array\n* @param {(Collection|VectorLike)} y - second input array\n* @throws {TypeError} first argument must be either an array-like object or a 1-dimensional ndarray\n* @throws {TypeError} second argument must be either an array-like object or a 1-dimensional ndarray\n* @throws {RangeError} input arrays must be the same length\n* @returns {(Collection|VectorLike)} `y`\n*\n* @example\n* var x = [ 4.0, 2.0, -3.0, 5.0, -1.0 ];\n* var y = [ 2.0, 6.0, -1.0, -4.0, 8.0 ];\n*\n* gswap( x, y );\n* // x => [ 2.0, 6.0, -1.0, -4.0, 8.0 ]\n* // y => [ 4.0, 2.0, -3.0, 5.0, -1.0 ]\n*/\nfunction gswap( x, y ) {\n\tvar isxf64;\n\tvar isxf32;\n\tvar isyf64;\n\tvar isyf32;\n\tvar isxa;\n\tvar isxv;\n\tvar isya;\n\tvar isyv;\n\n\tisxa = isndarrayLike( x );\n\tisya = isndarrayLike( y );\n\tisxv = isxa && x.ndims === 1 && x.strides.length === 1; // is ndarray-like vector?\n\tisyv = isya && y.ndims === 1 && y.strides.length === 1; // is ndarray-like vector?\n\tif ( isxv ) {\n\t\tisxf64 = isFloat64Array( x.data );\n\t\tisxf32 = ( isxf64 ) ? false : isFloat32Array( x.data );\n\t} else if ( isxa === false && isCollection( x ) ) {\n\t\tisxf64 = isFloat64Array( x );\n\t\tisxf32 = ( isxf64 ) ? false : isFloat32Array( x );\n\t} else {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be either an array-like object or a one-dimensional ndarray. Value: `%s`.', x ) );\n\t}\n\tif ( isyv ) {\n\t\tisyf64 = isFloat64Array( y.data );\n\t\tisyf32 = ( isyf64 ) ? false : isFloat32Array( y.data );\n\t} else if ( isya === false && isCollection( y ) ) {\n\t\tisyf64 = isFloat64Array( y );\n\t\tisyf32 = ( isyf64 ) ? false : isFloat32Array( y );\n\t} else {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be either an array-like object or a one-dimensional ndarray. Value: `%s`.', y ) );\n\t}\n\tif ( x.length !== y.length ) {\n\t\tthrow new RangeError( format( 'invalid argument. Arrays must be the same length. First argument length: `%u`. Second argument length: `%u`.', x.length, y.length ) );\n\t}\n\tif ( isxv && isyv ) {\n\t\tif ( isxf64 && isyf64 ) {\n\t\t\tdswap( x.length, x.data, x.strides[ 0 ], x.offset, y.data, y.strides[ 0 ], y.offset ); // eslint-disable-line max-len\n\t\t\treturn y;\n\t\t}\n\t\tif ( isxf32 && isyf32 ) {\n\t\t\tsswap( x.length, x.data, x.strides[ 0 ], x.offset, y.data, y.strides[ 0 ], y.offset ); // eslint-disable-line max-len\n\t\t\treturn y;\n\t\t}\n\t\tswap( x.length, x.data, x.strides[ 0 ], x.offset, y.data, y.strides[ 0 ], y.offset ); // eslint-disable-line max-len\n\t\treturn y;\n\t}\n\tif ( isxv ) {\n\t\tswap( x.length, x.data, x.strides[ 0 ], x.offset, y, 1, 0 );\n\t\treturn y;\n\t}\n\tif ( isyv ) {\n\t\tswap( x.length, x, 1, 0, y.data, y.strides[ 0 ], y.offset );\n\t\treturn y;\n\t}\n\tswap( x.length, x, 1, 0, y, 1, 0 );\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default gswap;\n"],"names":["gswap","x","y","isxf64","isxf32","isyf64","isyf32","isxa","isxv","isya","isyv","isndarrayLike","ndims","strides","length","isFloat64Array","data","isFloat32Array","isCollection","TypeError","format","RangeError","dswap","offset","sswap","swap"],"mappings":";;svBAwDA,SAASA,EAAOC,EAAGC,GAClB,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAMJ,GAJAH,EAAOI,EAAeV,GACtBQ,EAAOE,EAAeT,GACtBM,EAAOD,GAAoB,IAAZN,EAAEW,OAAoC,IAArBX,EAAEY,QAAQC,OAC1CJ,EAAOD,GAAoB,IAAZP,EAAEU,OAAoC,IAArBV,EAAEW,QAAQC,OACrCN,EAEJJ,IADAD,EAASY,EAAgBd,EAAEe,QACGC,EAAgBhB,EAAEe,UAC1C,KAAc,IAATT,IAAkBW,EAAcjB,GAI3C,MAAM,IAAIkB,UAAWC,EAAQ,kHAAmHnB,IAFhJG,IADAD,EAASY,EAAgBd,KACKgB,EAAgBhB,EAG9C,CACD,GAAKS,EAEJJ,IADAD,EAASU,EAAgBb,EAAEc,QACGC,EAAgBf,EAAEc,UAC1C,KAAc,IAATP,IAAkBS,EAAchB,GAI3C,MAAM,IAAIiB,UAAWC,EAAQ,mHAAoHlB,IAFjJI,IADAD,EAASU,EAAgBb,KACKe,EAAgBf,EAG9C,CACD,GAAKD,EAAEa,SAAWZ,EAAEY,OACnB,MAAM,IAAIO,WAAYD,EAAQ,+GAAgHnB,EAAEa,OAAQZ,EAAEY,SAE3J,OAAKN,GAAQE,EACPP,GAAUE,GACdiB,EAAOrB,EAAEa,OAAQb,EAAEe,KAAMf,EAAEY,QAAS,GAAKZ,EAAEsB,OAAQrB,EAAEc,KAAMd,EAAEW,QAAS,GAAKX,EAAEqB,QACtErB,GAEHE,GAAUE,GACdkB,EAAOvB,EAAEa,OAAQb,EAAEe,KAAMf,EAAEY,QAAS,GAAKZ,EAAEsB,OAAQrB,EAAEc,KAAMd,EAAEW,QAAS,GAAKX,EAAEqB,QACtErB,IAERuB,EAAMxB,EAAEa,OAAQb,EAAEe,KAAMf,EAAEY,QAAS,GAAKZ,EAAEsB,OAAQrB,EAAEc,KAAMd,EAAEW,QAAS,GAAKX,EAAEqB,QACrErB,GAEHM,GACJiB,EAAMxB,EAAEa,OAAQb,EAAEe,KAAMf,EAAEY,QAAS,GAAKZ,EAAEsB,OAAQrB,EAAG,EAAG,GACjDA,GAEHQ,GACJe,EAAMxB,EAAEa,OAAQb,EAAG,EAAG,EAAGC,EAAEc,KAAMd,EAAEW,QAAS,GAAKX,EAAEqB,QAC5CrB,IAERuB,EAAMxB,EAAEa,OAAQb,EAAG,EAAG,EAAGC,EAAG,EAAG,GACxBA,EACR"}